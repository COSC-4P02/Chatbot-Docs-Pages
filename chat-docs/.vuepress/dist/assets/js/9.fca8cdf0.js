(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{410:function(n,t,s){"use strict";s.r(t);var a=s(56),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"continuous-integration-and-continuous-deployment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continuous-integration-and-continuous-deployment"}},[n._v("#")]),n._v(" Continuous Integration and Continuous Deployment")]),n._v(" "),s("p",[n._v("After commit into this repo, CircleCi will run unit testing automatically, and Github Workflow will build and push the Docker Image to Docker Hub, our server is always listening the update for the docker image, if the digest is changed for the latest version, server will automatically pull the image and rebuilt the container.")]),n._v(" "),s("h2",{attrs:{id:"circleci-config"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#circleci-config"}},[n._v("#")]),n._v(" CircleCi Config")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("version: "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2.1")]),n._v("\n\norbs:\n  node: circleci/node@4.7\n\njobs:\n  build_backend:\n    working_directory: ~/circleci/Backend/\n    executor: node/default\n    steps:\n      - checkout:\n          path: ~/circleci/\n      - run:\n          command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("ls")]),n._v("\n      - node/install-npm\n      - restore_cache:\n          key: dependency-cache-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" checksum "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"package-lock.json"')]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n      - node/install-packages:\n          app-dir: ~/circleci/Backend/\n          cache-path: node_modules\n          override-ci-command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" i\n      - save_cache:\n          key: dependency-cache-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" checksum "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"package-lock.json"')]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n          paths:\n            - ./node_modules\n      - persist_to_workspace:\n          root: "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n          paths:\n            - "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n  build_frontend:\n    working_directory: ~/circleci/Frontend/\n    executor: node/default\n    steps:\n      - checkout:\n          path: ~/circleci/\n      - run:\n          command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("ls")]),n._v("\n      - node/install-yarn\n      - restore_cache:\n          key: dependency-cache-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" checksum "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"yarn.lock"')]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n      - node/install-packages:\n          app-dir: ~/circleci/Frontend/\n          cache-path: node_modules\n          override-ci-command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("yarn")]),n._v("\n      - save_cache:\n          key: dependency-cache-"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v(" checksum "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"yarn.lock"')]),n._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n          paths:\n            - ./node_modules\n      - persist_to_workspace:\n          root: "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n          paths:\n            - "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n\n  test_backend:\n    working_directory: ~/circleci/Backend/\n    docker:\n      - image: cimg/node:current\n    steps:\n      - attach_workspace:\n          at: "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n      - run:\n          name: Backend Test\n          command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v("test")]),n._v("\n\n  lint_backend:\n    working_directory: ~/circleci/Backend/\n    docker:\n      - image: cimg/node:current\n    steps:\n      - attach_workspace:\n          at: "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n      - run:\n          name: Backend Lint Test\n          command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("npm")]),n._v(" run lint\n\n  lint_frontend:\n    working_directory: ~/circleci/Frontend/\n    docker:\n      - image: cimg/node:current\n    steps:\n      - attach_workspace:\n          at: "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n      - run:\n          name: Frontend Lint Test\n          command: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("yarn")]),n._v(" lint\n\nworkflows:\n  version: "),s("span",{pre:!0,attrs:{class:"token number"}},[n._v("2")]),n._v("\n  build_and_test:\n    jobs:\n      - build_backend\n      - test_backend:\n          requires:\n            - build_backend\n      - lint_backend:\n          requires:\n            - build_backend\n      - build_frontend\n      - lint_frontend:\n          requires:\n            - build_frontend\n")])])]),s("h2",{attrs:{id:"docker-workflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker-workflow"}},[n._v("#")]),n._v(" Docker Workflow")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("name: Docker Continuous Deployment\n\non:\n  push:\n    paths:\n      - "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'Backend/**'")]),n._v("\n      - "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'Backend/**/**'")]),n._v("\n      - "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'Backend/**/**/**'")]),n._v("\n      - "),s("span",{pre:!0,attrs:{class:"token string"}},[n._v("'Backend/**/**/**/**'")]),n._v("\n  pull_request:\n    paths:\n      - Backend\n\ndefaults:\n  run:\n    working-directory: ./Backend\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - run: "),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("|")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" run --privileged --rm tonistiigi/binfmt --install all\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" login -u"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[n._v("${{ secrets.DOCKER_UN }")]),n._v('}"')]),n._v(" -p"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[n._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[n._v("${{ secrets.DOCKER_PW }")]),n._v('}"')]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" buildx create --name krunkbuilder\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" buildx "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("ls")]),n._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" buildx use krunkbuilder\n    - name: Build the Docker image "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("date")]),n._v("\n      run: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" buildx build "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v(" -t krunk/chatbot-ai-backend:"),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[n._v("$(")]),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("date")]),n._v(" +%s"),s("span",{pre:!0,attrs:{class:"token variable"}},[n._v(")")])]),n._v(" --platform"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("linux/arm64,linux/amd64 --push\n    - name: Build the Docker image latest\n      run: "),s("span",{pre:!0,attrs:{class:"token function"}},[n._v("docker")]),n._v(" buildx build "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v(" -t krunk/chatbot-ai-backend:latest --platform"),s("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v("linux/arm64,linux/amd64 --push\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);